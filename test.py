import numpy as np

def compute_normal(v1, v2, v3):
    # Compute vectors
    vector1 = np.subtract(v2, v1)
    vector2 = np.subtract(v3, v1)
    # Cross product
    normal = np.cross(vector1, vector2)
    # Normalize
    normal_length = np.linalg.norm(normal)
    normal = normal / normal_length if normal_length != 0 else normal
    return normal

# Example vertices (for simplicity, a few)
vertices = np.array([      
    # Front face
      # [-1.0, -1.0, 1.0],
      # [1.0, -1.0, 1.0],
      # [1.0, 1.0, 1.0],
      # [-1.0, 1.0, 1.0],
      # # Back face
      # [-1.0, -1.0, -1.0],
      # [-1.0, 1.0, -1.0],
      # [1.0, 1.0, -1.0],
      # [1.0, -1.0, -1.0],
      # # Top face
      # [-1.0, 1.0, -1.0],
      # [-1.0, 1.0, 1.0],
      # [1.0, 1.0, 1.0],
      # [1.0, 1.0, -1.0],
      # # Bottom face
      # [-1.0, -1.0, -1.0],
      # [1.0, -1.0, -1.0],
      # [1.0, -1.0, 1.0],
      # [-1.0, -1.0, 1.0],
      # # Right face
      # [1.0, -1.0, -1.0],
      # [1.0, 1.0, -1.0],
      # [1.0, 1.0, 1.0],
      # [1.0, -1.0, 1.0],
      # # Left face
      # [-1.0, -1.0, -1.0],
      # [-1.0, -1.0, 1.0],
      # [-1.0, 1.0, 1.0],
      # [-1.0, 1.0, -1.0]




      
[-0.989812, 0.456548, -0.005],
[0.989298, 0.456548, -0.005],
[-0.989812, 0.456548, -0.03],
[0.989298, 0.456548, -0.03],
[0.989298, 0.29, -0.005],
[-0.989812, 0.29, -0.005],
[-0.953755, -0.48133, -0.005],
[-0.989812, -0.445274, -0.005],
[-0.971784, -0.476499, -0.005],
[-0.984981, -0.463302, -0.005],
[0.989298, -0.445274, -0.005],
[0.953242, -0.48133, -0.005],
[0.984468, -0.463302, -0.005],
[0.97127, -0.476499, -0.005],
[-0.989812, -0.445274, -0.03],
[-0.953755, -0.48133, -0.03],
[-0.984981, -0.463302, -0.03],
[-0.971784, -0.476499, -0.03],
[0.953242, -0.48133, -0.03],
[0.989298, -0.445274, -0.03],
[0.97127, -0.476499, -0.03],
[0.984468, -0.463302, -0.03],
[-0.989812, 0.29, 0.009841],
[-0.939652, 0.29, 0.06],
[-0.983092, 0.29, 0.03492],
[-0.964732, 0.29, 0.05328],
[0.939139, 0.29, 0.06],
[0.989298, 0.29, 0.009841],
[0.964219, 0.29, 0.05328],
[0.982578, 0.29, 0.03492],
[0.989298, 0.456548, 0.009841],
[0.939139, 0.456548, 0.06],
[0.982578, 0.456548, 0.03492],
[0.964219, 0.456548, 0.05328],
[-0.939652, 0.456548, 0.06],
[-0.989812, 0.456548, 0.009841],
[-0.964732, 0.456548, 0.05328],
[-0.983092, 0.456548, 0.03492]
    # Add remaining vertices...
])

# Example faces (defined by indices into the vertices array)
faces = [
          #Front face
      # [0, 1, 2], [0, 2, 3],
      # #Back face
      # [4, 5, 6], [4, 6, 7],
      # #Top face
      # [8, 9, 10], [8, 10, 11],
      # #Bottom face
      # [12, 13, 14], [12, 14, 15],
      # #Right face
      # [16, 17, 18], [16, 18, 19],
      # #Left face
      # [20, 21, 22], [20, 22, 23]


      
[5, 14, 2],
[3, 2, 18],
[4, 3, 19],
[0, 3, 1],
[11, 15, 6],
[28, 29, 27],
[36, 37, 35],
[4, 30, 1],
[0, 22, 5],
[19, 12, 10],
[21, 13, 12],
[20, 11, 13],
[7, 16, 14],
[9, 17, 16],
[8, 15, 17],
[12, 13, 11],
[23, 36, 34],
[25, 37, 36],
[24, 35, 37],
[31, 28, 26],
[33, 29, 28],
[32, 27, 29],
[23, 31, 26],
[2, 0, 5],
[5, 7, 14],
[2, 14, 15],
[14, 16, 15],
[16, 17, 15],
[15, 18, 2],
[18, 20, 19],
[20, 21, 19],
[19, 3, 18],
[19, 10, 4],
[4, 1, 3],
[0, 2, 3],
[11, 18, 15],
[27, 4, 26],
[4, 5, 23],
[5, 22, 23],
[22, 24, 23],
[24, 25, 23],
[23, 26, 4],
[26, 28, 27],
[35, 0, 34],
[0, 1, 31],
[1, 30, 31],
[30, 32, 31],
[32, 33, 31],
[31, 34, 0],
[34, 36, 35],
[4, 27, 30],
[0, 35, 22],
[19, 21, 12],
[21, 20, 13],
[20, 18, 11],
[7, 9, 16],
[9, 8, 17],
[8, 6, 15],
[11, 6, 4],
[6, 8, 7],
[8, 9, 7],
[7, 5, 6],
[5, 4, 6],
[4, 10, 11],
[10, 12, 11],
[23, 25, 36],
[25, 24, 37],
[24, 22, 35],
[31, 33, 28],
[33, 32, 29],
[32, 30, 27]
    # Add remaining faces...
]

# Initialize normals
normals = np.zeros((len(vertices), 3))

# Compute normals for each face
face_normals = []
for face in faces:
    v1, v2, v3 = vertices[face]
    normal = compute_normal(v1, v2, v3)
    face_normals.append(normal)
    # Add normal to each vertex in the face
    for idx in face:
        normals[idx] += normal

# Normalize vertex normals
for i in range(len(normals)):
    normals[i] = normals[i] / np.linalg.norm(normals[i]) if np.linalg.norm(normals[i]) != 0 else normals[i]

# Print results
print("Vertex Normals:")
print(normals)
print(len(normals))